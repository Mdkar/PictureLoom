import java.awt.Color;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;

import g4p_controls.G4P;
import g4p_controls.GButton;
import g4p_controls.GCScheme;
import g4p_controls.GEvent;
import g4p_controls.GLabel;
import g4p_controls.GTextField;
import processing.core.PApplet;
import processing.core.PGraphics;
import processing.core.PImage;

public class PictureLoom extends PApplet{
	
	public boolean isInt(String n) {
		if(n == null) {
			return false;
		}
		try {
	        int i = Integer.parseInt(n);
	    } catch (NumberFormatException nfe) {
	    		return false;
	    }
		return true;
	}
	
	public void button1_click1(GButton source, GEvent event) { //_CODE_:button1:315419:
		boolean isValid = true;
		for(int i = 0; i < isValidParams.length; i++) {
			if(!isValidParams[i]) {
				isValid = false;
			}
		}
		if(isValid) {
			moves = new int[maxMoves];
			currMove = 1;
			moves[0] = 0;
			selectInput("Select an image to process:", "fileSelected");
			
		}
	} //_CODE_:button1:315419:

	public void button2_click1(GButton source, GEvent event) { //_CODE_:button2:484938:
		boolean isValid = true;
		for(int i = 0; i < isValidParams.length; i++) {
			if(!isValidParams[i]) {
				isValid = false;
			}
		}
		if(isValid) {
			selectInput("Select a file to process:", "fileSelected");
		}
	} //_CODE_:button2:484938:

	public void textfield1_change1(GTextField source, GEvent event) { //_CODE_:textfield1:242341:
		if(isInt(source.getText())) {
			nPegs = Integer.parseInt(source.getText());
			isValidParams[0] = true;
			label1.setLocalColorScheme(G4P.CYAN_SCHEME);
		} else {
			label1.setLocalColorScheme(G4P.RED_SCHEME);
			isValidParams[0] = false;
		}

	} //_CODE_:textfield1:242341:

	public void textfield2_change1(GTextField source, GEvent event) { //_CODE_:textfield2:525480:
		if(isInt(source.getText())) {
			minGap = Integer.parseInt(source.getText());
			isValidParams[1] = true;
			label2.setLocalColorScheme(G4P.CYAN_SCHEME);
		} else {
			label2.setLocalColorScheme(G4P.RED_SCHEME);
			isValidParams[1] = false;
		}
	} //_CODE_:textfield2:525480:

	public void textfield3_change1(GTextField source, GEvent event) { //_CODE_:textfield3:812793:
		if(isInt(source.getText())) {
			maxMoves = Integer.parseInt(source.getText());
			isValidParams[2] = true;
			label3.setLocalColorScheme(G4P.CYAN_SCHEME);
		} else {
			label3.setLocalColorScheme(G4P.RED_SCHEME);
			isValidParams[2] = false;
		}
	} //_CODE_:textfield3:812793:

	public void textfield4_change1(GTextField source, GEvent event) { //_CODE_:textfield4:366916:
		if(isInt(source.getText())) {
			lineWeight = Integer.parseInt(source.getText());
			isValidParams[3] = true;
			label4.setLocalColorScheme(G4P.CYAN_SCHEME);
		} else {
			label4.setLocalColorScheme(G4P.RED_SCHEME);
			isValidParams[3] = false;
		}
	} //_CODE_:textfield4:366916:



	// Create all the GUI controls. 
	// autogenerated do not edit
	public void createGUI(){
		G4P.messagesEnabled(false);
		G4P.setGlobalColorScheme(GCScheme.CYAN_SCHEME);
		G4P.setMouseOverEnabled(false);
		surface.setTitle("Sketch Window");
		button1 = new GButton(this, 220, 374, 90, 25);
		button1.setText("Load Image");
		button1.addEventHandler(this, "button1_click1");
		button2 = new GButton(this, 390, 375, 90, 25);
		button2.setText("Load File");
		button2.addEventHandler(this, "button2_click1");
		textfield1 = new GTextField(this, 225, 115, 128, 30, G4P.SCROLLBARS_NONE);
		textfield1.setText("201");
		textfield1.setOpaque(true);
		textfield1.addEventHandler(this, "textfield1_change1");
		textfield2 = new GTextField(this, 225, 175, 128, 30, G4P.SCROLLBARS_NONE);
		textfield2.setText("20");
		textfield2.setOpaque(true);
		textfield2.addEventHandler(this, "textfield2_change1");
		textfield3 = new GTextField(this, 225, 235, 128, 30, G4P.SCROLLBARS_NONE);
		textfield3.setText("2500");
		textfield3.setOpaque(true);
		textfield3.addEventHandler(this, "textfield3_change1");
		textfield4 = new GTextField(this, 225, 295, 128, 30, G4P.SCROLLBARS_NONE);
		textfield4.setText("30");
		textfield4.setOpaque(true);
		textfield4.addEventHandler(this, "textfield4_change1");
		label1 = new GLabel(this, 225, 92, 128, 20);
		label1.setText("Number of Pegs");
		label1.setOpaque(true);
		label2 = new GLabel(this, 225, 152, 128, 20);
		label2.setText("Minimum Gap");
		label2.setOpaque(true);
		label3 = new GLabel(this, 225, 212, 80, 20);
		label3.setText("Max Moves");
		label3.setOpaque(true);
		label4 = new GLabel(this, 225, 272, 80, 20);
		label4.setText("Line Weight");
		label4.setOpaque(true);
	}
	public void hideGUI() {
		button1.setVisible(false);
		button2.setVisible(false);
		textfield1.setVisible(false);
		textfield2.setVisible(false);
		textfield3.setVisible(false);
		textfield4.setVisible(false);
		label1.setVisible(false);
		label2.setVisible(false);
		label3.setVisible(false);
		label4.setVisible(false);
	}

	// Variable declarations 
	// autogenerated do not edit
	GButton button1; 
	GButton button2; 
	GTextField textfield1; 
	GTextField textfield2; 
	GTextField textfield3; 
	GTextField textfield4; 
	GLabel label1; 
	GLabel label2; 
	GLabel label3; 
	GLabel label4; 

	
	String fileName = null;
	PImage img, stringImg;
	PGraphics pg;
	int nPegs = 201;//odd number
	int minGap = 20;
	int maxMoves = 2500;
	int lineWeight = 30;
	Point[] pegs;
	int[] moves;
	int currMove, animateIndex;
	boolean animate = true;
	boolean pause = false;
	boolean doneSetup = false;
	boolean showImage = false;
	boolean animateLoop = false;
	boolean dataLoaded = false;
	boolean[] isValidParams = {true, true, true, true};
	int clothSize = 10;//diameter of hoop in cm
	ArrayList<Byte> bytes = new ArrayList<Byte>();
	public static void main(String[] args) {
		PApplet.main("PictureLoom");
	}
	
	public void settings(){
		size(700,700);
	}
	
	public void setup(){
		background(219,235,243);
		createGUI();
	}
	
	public void fileSelected(File selection) {
		if (selection == null) {
			println("Window was closed or the user hit cancel.");
		} else {
			fileName = selection.getAbsolutePath();
			println("User selected " + fileName);
			if(fileName.substring(fileName.lastIndexOf('.')).equalsIgnoreCase(".txt")) {
				loadData();
			} else {
				hideGUI();
				setup2();
			}
		}
	}
	
	private void loadData() {
		String[] lines = loadStrings(fileName);
		nPegs = Integer.parseInt(lines[0]);
		minGap = Integer.parseInt(lines[1]);
		currMove = Integer.parseInt(lines[2]);
		if(currMove > maxMoves) {
			maxMoves = Integer.parseInt(lines[2]);
		}
		lineWeight = Integer.parseInt(lines[3]);
		moves = new int[maxMoves];
		for(int i = 4; i < lines.length; i++) {
			moves[i-4] = Integer.parseInt(lines[i]);
		}
		dataLoaded = true;
		selectInput("Select a file to process:", "fileSelected");
	}

	public void setup2() {
		pegs = new Point[nPegs];
		img = loadImage(fileName);
		img.filter(GRAY);
		if(img.width != img.height) {
			System.out.println("Not A Square!");
			img.resize(img.width, img.width);
		}
		if(img.width > 700) {
			img.resize(500, 500);
		}
		img.loadPixels();
		stringImg = createImage(img.width, img.height, RGB);
		stringImg.loadPixels();
		for (int i = 0; i < stringImg.pixels.length; i++) {
			stringImg.pixels[i] = color(255); 
		}
		stringImg.updatePixels();
		pg = createGraphics(img.width, img.height);
		image(img, 0, 0);
		float pegX, pegY, angle = 0;
		for(int i = 0; i < nPegs; i++) {
			pegX = (float) (img.width/2 + (img.width * Math.cos(angle)/2));
			pegY = (float) (img.height/2 + (img.height * Math.sin(angle)/2));
			point(pegX, pegY);
			pegs[i] = new Point(pegX, pegY);
			angle+=(2*Math.PI/nPegs);
		}
//		for(angle = 0; angle <= 2*Math.PI - 2*Math.PI/nPegs; angle+=(2*Math.PI/nPegs)) {
//			pegX = (float) (img.width/2 + (img.width * Math.cos(angle)/2));
//			pegY = (float) (img.height/2 + (img.height * Math.sin(angle)/2));
//			point(pegX, pegY);
//			pegs[i] = new Point(pegX, pegY);
//			//System.out.println("Peg " + i +": (" + pegX + "," + pegY + ")");
//			i++;
//		}
		System.out.println("Total pegs: " + nPegs + ", Total winds: " + maxMoves);
		println("current move: " + currMove);
		if(!animate) {
			while(currMove < maxMoves) {
				weave();
				currMove++;
			}
			image(stringImg, 0, 0);
			stringImg.save(fileName.substring(0, fileName.lastIndexOf('.')) + "_string.png");
			String[] s = new String[moves.length];
			for(int j = 0; j < moves.length; j++) {
				s[j] = String.valueOf(moves[j]);
			}
			saveData(maxMoves, s);
			for(int j = 0; j < pegs.length; j++) {
				point(pegs[j].getX(), pegs[j].getY());
			}
		}
		if(dataLoaded) {
			animateLoop = true;
			animateIndex = 0;
		}
		doneSetup = true;
	}
	
	private void weave() {
		float minDiff = -1;
		int minPeg = 0;
		for(int i = minGap; i < nPegs - minGap; i++) {
			Point curr = pegs[moves[currMove - 1]];
			Point next = pegs[(moves[currMove - 1] + i) % pegs.length];
			pg.beginDraw();
			pg.image(stringImg, 0, 0);
			pg.stroke(0,lineWeight);
			pg.line(curr.getX(), curr.getY(), next.getX(), next.getY());
			pg.endDraw();
			pg.loadPixels();
			float cumDiff = 0;
			for(int j = 0; j < img.pixels.length; j++) {
				float diff = brightness(img.pixels[j]) - brightness(pg.pixels[j]);
				cumDiff += Math.pow(diff, 2);///distance(curr.getX(), curr.getY(), next.getX(), next.getY());
			}
			//System.out.println(cumDiff + ", " + minDiff + ", " + (moves[currMove - 1] + i) % pegs.length);
			if(minDiff == -1 || (cumDiff < minDiff && (currMove < 2 || (moves[currMove - 1] + i) % pegs.length != moves[currMove - 2]))) {
				minDiff = cumDiff;
				minPeg = (moves[currMove - 1] + i) % pegs.length;
			} else if(cumDiff == minDiff) {
				System.out.println("tie");
				if(random(-1,1) < 0) {
					minDiff = cumDiff;
					minPeg = (moves[currMove - 1] + i) % pegs.length;
				}
			}
		}
		Point curr = pegs[moves[currMove - 1]];
		Point next = pegs[minPeg];
		pg.beginDraw();
		pg.image(stringImg, 0, 0);
		pg.stroke(0,lineWeight);
		pg.line(curr.getX(), curr.getY(), next.getX(), next.getY());
		pg.endDraw();
		pg.updatePixels();
		stringImg = pg.copy();
		moves[currMove] = minPeg;
		System.out.println("string " + currMove + " to peg " + minPeg);
	}
	/*
	private float distance(float x1, float y1, float x2, float y2) {
		return (float) Math.sqrt(((x2-x1)*(x2-x1)) + ((y2-y1)*(y2-y1)));
	}*/

	public void draw(){
		if(doneSetup && animateLoop) {
			if(animateIndex == 0) {
				background(Color.LIGHT_GRAY.getRGB());
				fill(255);
				noStroke();
				rect(0, 0, img.width, img.height);
				stroke(0);
				for(int j = 0; j < pegs.length; j++) {
					point(pegs[j].getX(), pegs[j].getY());
				}
			}
			if(animateIndex < currMove && animateIndex < (maxMoves-1)) {
				Point curr = pegs[moves[animateIndex]];
				Point next = pegs[moves[animateIndex+1]];
				stroke(0,lineWeight);
				line(curr.getX(), curr.getY(), next.getX(), next.getY());
				animateIndex++;
			} else {
				if(dataLoaded) {
					stringImg = copy();
				}
				animateLoop = false;
				stroke(0);
			}
		} else if(doneSetup && animate && !pause) {
			if(currMove == 1) {
				background(Color.LIGHT_GRAY.getRGB());
			}
			if(currMove < maxMoves) {
				weave();
				currMove++;
			} else if(currMove == maxMoves) {
				stringImg.save(fileName.substring(0, fileName.lastIndexOf('.')) + "_string.png");
				String[] s = new String[moves.length];
				for(int j = 0; j < moves.length; j++) {
					s[j] = String.valueOf(moves[j]);
				}
				saveData(maxMoves, s);
				createEmbroidery();
				currMove++;
			}
			image(stringImg, 0, 0);
			for(int j = 0; j < pegs.length; j++) {
				point(pegs[j].getX(), pegs[j].getY());
			}
		}
		if(showImage && !pause) {
			image(img,0,0);
		}
		
	}
	
	private void saveData(int n, String[] m) {
		ArrayList<String> s = new ArrayList<String>();
		s.add(nPegs + "");
		s.add(minGap + "");
		s.add(n + "");
		s.add(lineWeight + "");
		s.addAll(Arrays.asList(m));
		saveStrings(fileName.substring(0, fileName.lastIndexOf('.')) + "_string.txt", s.toArray(new String[0]));
	}

	public void keyPressed() {
		if(doneSetup) {
			if (key == ' ') {
				pause = !pause;
			}
			if (key == 'i') {
				showImage = !showImage;
			}
			if (key == 's') {
				stringImg.save(fileName.substring(0, fileName.lastIndexOf('.')) + "_string.png");
				if(currMove <= maxMoves) {
					String[] s = new String[currMove];
					for(int j = 0; j < s.length; j++) {
						s[j] = String.valueOf(moves[j]);
					}
					saveData(currMove-1, s);
				} else {
					String[] s = new String[moves.length];
					for(int j = 0; j < moves.length; j++) {
						s[j] = String.valueOf(moves[j]);
					}
					saveData(maxMoves, s);
				}

			}
			if (key == 'r') {
				animateLoop = true;
				animateIndex = 0;
			}
		}
	}
	
	private class Point{
		float x, y;
		public Point(float x, float y) {
			this.x = x;
			this.y = y;
		}
		public float getX() {
			return x;
		}
		public float getY() {
			return y;
		}
	}
	
	public void createEmbroidery() {
		int oldX, oldY;
		oldX = round(map(pegs[0].x, 0, img.width, -(100 * clothSize/2), 100*clothSize/2));
		oldY = round(map(pegs[0].y, 0, img.height, -(100 * clothSize/2), 100*clothSize/2));
		addStitch(oldX, oldY);
		bytes.add((byte) 0);
		bytes.add((byte) 0);
		bytes.add((byte) 1);
		bytes.add((byte) 0);
		bytes.add((byte) 0);
		bytes.add((byte) 1);
		bytes.add((byte) -1);
		bytes.add((byte) 0);
		bytes.add((byte) 0);
		bytes.add((byte) -1);
		for(int i = 1; i < moves.length; i++) {
			int currX = round(map(pegs[moves[i]].x, 0, img.width, -(100 * clothSize/2), 100*clothSize/2));
			int currY = round(map(pegs[moves[i]].y, 0, img.height, -(100 * clothSize/2), 100*clothSize/2));
			addStitch(currX - oldX, currY - oldY);
			bytes.add((byte) 0);
			bytes.add((byte) 0);
			bytes.add((byte) 1);
			bytes.add((byte) 0);
			bytes.add((byte) 0);
			bytes.add((byte) 1);
			bytes.add((byte) -1);
			bytes.add((byte) 0);
			bytes.add((byte) 0);
			bytes.add((byte) -1);
			oldX = currX;
			oldY = currY;
		}
		byte[] data = new byte[bytes.size()];
		for(int i = 0; i < data.length; i++) {
			data[i] = bytes.get(i);
		}
		saveBytes(fileName.substring(0, fileName.lastIndexOf('.')) + "_string.exp", data);
		
	}
	public void addStitch(int dx, int dy) {
		if(Math.abs(dx) > 127 || Math.abs(dy) > 127) {	
			if(dx%127 != 0 || dy%127 != 0) {
				addStitch(dx%127, dy%127);
				dx = ((int) dx/127) * 127;
				dy = ((int) dy/127) * 127;
			}
			addStitch(Integer.signum(dx)*127, Integer.signum(dy)*127);
			addStitch(dx-(Integer.signum(dx)*127), dy-(Integer.signum(dy)*127));		
		} else {
			bytes.add((byte) -128);
			bytes.add((byte) 4);
			bytes.add((byte) dx);
			bytes.add((byte) dy);
		}
	}
//	public void addStitch(int dx, int dy, boolean jump) {
//		//System.out.println(dx + ", " + dy);
//		if(Math.abs(dx) > 10 || Math.abs(dy) > 10) {	
//			int cx = 0, cy = 0, sumx = 0, sumy = 0;
//			for(int i = 1; i <= 10; i++) {
//				cx = round(lerp(0, dx, 0.1f));
//				cy = round(lerp(0, dy, 0.1f));
//				sumx += cx;
//				sumy += cy;
//				addStitch(cx, cy, jump);
//			}
//			if(sumx != dx || sumy != dy) {
//				//System.out.println(dx + "-" + sumx + ", " + dy + "-" + sumy);
//				addStitch(dx - sumx, dy - sumy, jump);
//			}
//		} else {
//			if(jump) {
//				bytes.add((byte) -128);
//				bytes.add((byte) 4);
//			}
//			bytes.add((byte) dx);
//			bytes.add((byte) dy);
//		}
//	}
}